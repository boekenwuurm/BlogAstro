---
interface Props {
  images: Array<{
    url: string;
    alt?: string;
    caption?: string;
  }>;
}

const { images } = Astro.props;

function getFullSizeUrl(url: string): string {
  return url.replace(/-\d+x\d+(\.[a-z]+)$/i, '$1');
}

const processedImages = images.map((img) => ({
  ...img,
  displayUrl: getFullSizeUrl(img.url),
  thumbUrl: img.url,
}));
---

<div class="image-gallery">
  {
    processedImages.map((img, index) => (
      <button
        class="gallery-item"
        data-index={index}
        data-large-url={img.displayUrl}
        data-caption={img.caption || ''}
        data-alt={img.alt || ''}
        aria-label={`Afbeelding ${index + 1} bekijken`}
      >
        <img
          src={img.displayUrl}
          alt={img.alt || `Gallery image ${index + 1}`}
          loading="lazy"
          class="gallery-img"
        />
        {img.caption && <span class="gallery-caption">{img.caption}</span>}
      </button>
    ))
  }
</div>

<div id="lightbox" class="lightbox" aria-hidden="true">
  <button class="lightbox-close" aria-label="Sluiten">
    <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
      <path d="M18 6L6 18M6 6l12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round"
      ></path>
    </svg>
  </button>

  <button class="lightbox-prev" aria-label="Vorige">
    <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
      <path
        d="M15 18l-6-6 6-6"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </button>

  <div class="lightbox-content">
    <img src="" alt="" class="lightbox-img" />
    <p class="lightbox-caption"></p>
  </div>

  <button class="lightbox-next" aria-label="Volgende">
    <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
      <path
        d="M9 18l6-6-6-6"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </button>
</div>

<style>
  .image-gallery {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(280px, 100%), 1fr));
    gap: 1.5rem;
    margin: 2.5rem 0;
    width: 100%;
  }

  .image-gallery:has(.gallery-item:only-child) {
    max-width: 400px;
    margin-left: auto;
    margin-right: auto;
  }

  .image-gallery:has(.gallery-item:nth-child(2):last-child) {
    max-width: 850px;
    margin-left: auto;
    margin-right: auto;
  }

  .gallery-item {
    position: relative;
    width: 100%;
    aspect-ratio: 4 / 3;
    overflow: hidden;
    border-radius: 16px;
    border: none;
    padding: 0;
    background: #f8f9fa;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow:
      0 1px 3px rgba(0, 0, 0, 0.05),
      0 4px 12px rgba(0, 0, 0, 0.08);
  }

  .gallery-item:hover {
    transform: translateY(-6px) scale(1.01);
    box-shadow:
      0 8px 16px rgba(0, 0, 0, 0.12),
      0 16px 32px rgba(0, 0, 0, 0.15);
  }

  .gallery-item:active {
    transform: translateY(-2px) scale(1);
  }

  .gallery-img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .gallery-item:hover .gallery-img {
    transform: scale(1.08);
  }

  .gallery-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 1rem;
    background: linear-gradient(
      to top,
      rgba(0, 0, 0, 0.85) 0%,
      rgba(0, 0, 0, 0.6) 50%,
      transparent 100%
    );
    color: white;
    font-size: 0.95rem;
    font-weight: 500;
    opacity: 0;
    transition: opacity 0.3s ease;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }

  .gallery-item:hover .gallery-caption {
    opacity: 1;
  }

  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.96);
    z-index: 9999;
    display: none;
    align-items: center;
    justify-content: center;
    padding: 1.5rem;
    backdrop-filter: blur(10px);
  }

  .lightbox.active {
    display: flex;
  }

  .lightbox-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 1.5rem;
    max-width: 95vw;
    max-height: 90vh;
  }

  .lightbox-img {
    max-width: 90vw;
    max-height: 80vh;
    width: auto;
    height: auto;
    object-fit: contain;
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.6);
  }

  .lightbox-caption {
    color: white;
    font-size: 1.1rem;
    line-height: 1.6;
    text-align: center;
    margin: 0;
    max-width: 800px;
    padding: 0.75rem 1.5rem;
    background: rgba(0, 0, 0, 0.8);
    border-radius: 12px;
    backdrop-filter: blur(15px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.4);
  }

  .lightbox-close,
  .lightbox-prev,
  .lightbox-next {
    position: absolute;
    background: rgba(255, 255, 255, 0.15);
    border: 2px solid rgba(255, 255, 255, 0.25);
    color: white;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(10px);
  }

  .lightbox-close:hover,
  .lightbox-prev:hover,
  .lightbox-next:hover {
    background: rgba(255, 255, 255, 0.3);
    border-color: rgba(255, 255, 255, 0.5);
    transform: scale(1.1);
  }

  .lightbox-close {
    top: 2rem;
    right: 2rem;
  }

  .lightbox-prev {
    left: 2rem;
    top: 50%;
    transform: translateY(-50%);
  }

  .lightbox-prev:hover {
    transform: translateY(-50%) scale(1.1);
  }

  .lightbox-next {
    right: 2rem;
    top: 50%;
    transform: translateY(-50%);
  }

  .lightbox-next:hover {
    transform: translateY(-50%) scale(1.1);
  }

  @media (max-width: 768px) {
    .image-gallery {
      grid-template-columns: 1fr;
      gap: 1rem;
      margin: 1.5rem 0;
    }

    .image-gallery:has(.gallery-item:only-child),
    .image-gallery:has(.gallery-item:nth-child(2):last-child) {
      max-width: 100%;
    }

    .gallery-item {
      aspect-ratio: 16 / 10;
    }

    .lightbox-close,
    .lightbox-prev,
    .lightbox-next {
      width: 50px;
      height: 50px;
    }

    .lightbox-close {
      top: 1rem;
      right: 1rem;
    }

    .lightbox-prev {
      left: 1rem;
    }

    .lightbox-next {
      right: 1rem;
    }

    .lightbox-caption {
      font-size: 0.95rem;
      padding: 0.5rem 1rem;
    }
  }
</style>

<script>
  const galleryItems = document.querySelectorAll('.gallery-item');
  const lightbox = document.getElementById('lightbox');
  const lightboxImg = lightbox?.querySelector('.lightbox-img') as HTMLImageElement;
  const lightboxCaption = lightbox?.querySelector('.lightbox-caption') as HTMLParagraphElement;
  const closeBtn = lightbox?.querySelector('.lightbox-close');
  const prevBtn = lightbox?.querySelector('.lightbox-prev');
  const nextBtn = lightbox?.querySelector('.lightbox-next');

  let currentIndex = 0;

  const images = Array.from(galleryItems).map((item) => ({
    src: item.getAttribute('data-large-url') || '',
    alt: item.getAttribute('data-alt') || '',
    caption: item.getAttribute('data-caption') || '',
  }));

  function openLightbox(index: number) {
    currentIndex = index;
    updateLightboxImage();
    lightbox?.classList.add('active');
    lightbox?.setAttribute('aria-hidden', 'false');
    document.body.style.overflow = 'hidden';
  }

  function closeLightbox() {
    lightbox?.classList.remove('active');
    lightbox?.setAttribute('aria-hidden', 'true');
    document.body.style.overflow = '';
  }

  function updateLightboxImage() {
    const img = images[currentIndex];
    if (lightboxImg && img) {
      lightboxImg.src = img.src;
      lightboxImg.alt = img.alt;
    }
    if (lightboxCaption && img) {
      lightboxCaption.textContent = img.caption;
      lightboxCaption.style.display = img.caption ? 'block' : 'none';
    }
  }

  function showNext() {
    currentIndex = (currentIndex + 1) % images.length;
    updateLightboxImage();
  }

  function showPrev() {
    currentIndex = (currentIndex - 1 + images.length) % images.length;
    updateLightboxImage();
  }

  galleryItems.forEach((item, index) => {
    item.addEventListener('click', () => openLightbox(index));
  });

  closeBtn?.addEventListener('click', closeLightbox);
  prevBtn?.addEventListener('click', showPrev);
  nextBtn?.addEventListener('click', showNext);

  lightbox?.addEventListener('click', (e) => {
    if (e.target === lightbox) closeLightbox();
  });

  document.addEventListener('keydown', (e) => {
    if (!lightbox?.classList.contains('active')) return;
    if (e.key === 'Escape') closeLightbox();
    if (e.key === 'ArrowLeft') showPrev();
    if (e.key === 'ArrowRight') showNext();
  });
</script>
